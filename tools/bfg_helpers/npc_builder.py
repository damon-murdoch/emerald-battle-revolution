# Common Library
import src.common as common

# Built-in Libraries
import os, json

INPUT_FOLDER = "tools/bfg_helpers/custom"

# Input File Folders
# .set files will be treated as individual sets
# .team files will be treated as an entire team
INPUT_FILE = os.path.join(INPUT_FOLDER, "npcs.json") 

# Simple NPCs Output File
OUTPUT_FILE = "data/scripts/simple_npcs.pory"

# Output Directory
OUTPUT_DIRECTORY = "/data/scripts/"

# Command Delimiter
COMMAND_DELIMITER = ":"

if __name__ == '__main__':

    # Output String Contents
    output = [
        "# File Auto-Generated By ebr-helpers (npc_builder.py)",
        "",
    ]

    # Create the input "npcs.json" file
    if not (os.path.exists(INPUT_FILE)):
        with open(INPUT_FILE, "w+") as file:
            file.write("{}\n")

    # Get the content from the input file
    with open(INPUT_FILE, "r") as file:
        content = json.load(file)

        # Loop over the maps
        for map in content:
            output.append(f"# {map} Scripts")
            output.append("")
            npcs = content[map]

            # Loop over the npcs
            for npc in npcs:
                # Basic NPC Starter Content
                output.append(f"# {npc}")
                output.append(f"script {map}_EventScript_{npc} " + "{")
                output.append("    lock")
                output.append("    faceplayer")

                # Loop over the messages
                messages = npcs[npc]
                for message in messages:
                    # Message contains 'COMMAND_DELIMITER'
                    if COMMAND_DELIMITER in message:
                        # Only split on first instance
                        cmd,msg = message.split(COMMAND_DELIMITER, 1)
                        output.append(f'    {cmd}({msg})')
                    else:
                        output.append(f'    msgbox(format("{message}"))')

                # Basic NPC Ending Content
                output.append("    release")
                output.append("    end")
                output.append("}")
                output.append("")

    # Join the output string
    output_str = "\n".join(output)

    # Write the content to the output file
    with open(OUTPUT_FILE, "w+") as file:
        file.write(output_str)